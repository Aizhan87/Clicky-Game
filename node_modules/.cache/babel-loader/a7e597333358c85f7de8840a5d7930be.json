{"ast":null,"code":"import _objectSpread from \"/Users/Aizhan87/Desktop/Clicky-Game/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/Aizhan87/Desktop/Clicky-Game/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport friends from \"./friends.json\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = id => {\n      // const randNum = Math.floor(Math.random() * this.state.friends.length)\n      // const randomImg = this.state.friends[randNum].id\n      // if (this.state.friends.id !== id) {\n      //   this.setState({ friends: randomImg });\n      // }\n      let correctGuess = false;\n      const newData = this.state.friends.map(friend => {\n        const newFriend = _objectSpread({}, friend);\n\n        if (newFriend.id === id) {\n          if (!newFriend.clicked) {\n            newFriend.clicked = true;\n            correctGuess = true;\n          }\n        }\n\n        return newFriend;\n      });\n      correctGuess ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\n    };\n\n    this.handleIncorrectGuess = data => {\n      this.setState({\n        friends: this.resetFriends(data),\n        score: 0\n      });\n    };\n\n    this.handleCorrectGuess = data => {\n      const _this$state = this.state,\n            score = _this$state.score,\n            topScore = _this$state.topScore;\n      const newScore = score + 1;\n      const newTopScore = Math.max(newScore, topScore);\n      this.setState({\n        friends: this.shuffleData(data),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    this.shuffleData = data => {\n      // let i = data.length - 1\n      for (let i = 0; i < data.length; i++) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = data[i];\n        data[i] = data[j];\n        data[j] = temp;\n      } // while (i > 0) {\n      //   let j = Math.floor(Math.random() * (i + 1));\n      //   [data[i], data[j]] = [data[j], data[i]];\n      //   i--\n      // }\n\n\n      return data;\n    };\n\n    this.resetFriends = data => {\n      const resetdata = data.map(friend => _objectSpread({}, friend, {\n        clicked: false\n      }));\n      return this.shuffleData(resetdata);\n    };\n\n    this.state = {\n      friends: friends,\n      score: 0,\n      topScore: 0\n    };\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \" \", React.createElement(Navbar, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.friends.map(friend => React.createElement(FriendCard, {\n      handleClick: this.handleClick,\n      id: friend.id,\n      key: friend.id,\n      name: friend.name,\n      image: friend.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Aizhan87/Desktop/Clicky-Game/src/App.js"],"names":["React","Component","FriendCard","Wrapper","friends","Navbar","Header","Footer","App","constructor","handleClick","id","correctGuess","newData","state","map","friend","newFriend","clicked","handleCorrectGuess","handleIncorrectGuess","data","setState","resetFriends","score","topScore","newScore","newTopScore","Math","max","shuffleData","i","length","j","floor","random","temp","resetdata","render","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport friends from \"./friends.json\";\nimport Navbar from \"./components/Navbar\"\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      friends: friends,\n      score: 0,\n      topScore: 0\n    }\n\n  }\n\n\n  handleClick = id => {\n    // const randNum = Math.floor(Math.random() * this.state.friends.length)\n    // const randomImg = this.state.friends[randNum].id\n    // if (this.state.friends.id !== id) {\n    //   this.setState({ friends: randomImg });\n    // }\n    let correctGuess = false\n    const newData = this.state.friends.map(friend => {\n      const newFriend = { ...friend }\n      if (newFriend.id === id) {\n        if (!newFriend.clicked) {\n          newFriend.clicked = true\n          correctGuess = true\n        }\n      }\n      return newFriend\n    })\n    correctGuess ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData)\n  };\n\n  handleIncorrectGuess = data => {\n    this.setState({\n      friends: this.resetFriends(data),\n      score: 0\n    })\n  }\n\n  handleCorrectGuess = data => {\n    const { score, topScore } = this.state\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore)\n    this.setState({\n      friends: this.shuffleData(data),\n      score: newScore,\n      topScore: newTopScore\n    })\n  }\n\n  shuffleData = data => {\n    // let i = data.length - 1\n\n    for (let i = 0; i < data.length; i++) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = data[i];\n      data[i] = data[j];\n      data[j] = temp\n    }\n    // while (i > 0) {\n    //   let j = Math.floor(Math.random() * (i + 1));\n    //   [data[i], data[j]] = [data[j], data[i]];\n    //   i--\n    // }\n    return data\n  }\n\n  resetFriends = data => {\n    const resetdata = data.map(friend => ({ ...friend, clicked: false }))\n    return this.shuffleData(resetdata)\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div> <Navbar\n        score={this.state.score}\n        topScore={this.state.topScore} />\n        <Header />\n        <Wrapper>\n          {this.state.friends.map(friend => (\n            <FriendCard\n              handleClick={this.handleClick}\n              id={friend.id}\n              key={friend.id}\n              name={friend.name}\n              image={friend.image}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}